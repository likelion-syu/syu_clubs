{"version":3,"sources":["store/posts/actions.ts","store/clubs/actions.ts","store/lib/createAsyncThunk.ts","store/clubs/index.ts","db/api/posts.ts","db/api/clubs.ts","db/index.ts","store/clubs/reducer.ts","store/clubs/thunks.ts","store/posts/reducer.ts","api.ts","store/posts/thunks.ts","store/posts/index.ts","containers/ClubLoader.tsx","App.tsx","scenes/SideMenuScene/index.tsx","components/Header/index.tsx","components/Footer/index.tsx","components/Base/index.tsx","components/NavToTop/index.tsx","scenes/MainScene/index.tsx","serviceWorker.ts","store/index.ts","index.tsx","store/lib/reducerUtils.ts"],"names":["postPostAsync","createAsyncAction","getPostListAsync","getClubsListAsync","createAsyncThunk","asyncActionCreator","promiseCreator","params","dispatch","a","request","success","failure","undefined","result","getPostsList","host","process","getList","options","console","log","axios","get","response","data","getFavList","page","items_per_page","keyword","category","ClubList","createReducer","list","asyncState","initial","handleAction","transformToArray","createAsyncReducer","combineReducers","getClubsListThunk","ClubsAPI","PostReducer","postData","PostList","post","headers","PostsAPI","ClubLoader","App","styles","container","position","top","width","height","display","flexDirection","backgroundColor","padding","index","props","ui","getVisibility","visibility","close","style","className","onClick","left","justifyContent","logo","margin","logoWrapper","alignSelf","collapseBtn","collapse","icon","fontSize","Header","useState","menuVisibility","setMenuVisibility","navTransparent","setNavTransparent","menu","open","nav","class","useEffect","window","addEventListener","ev","pageYOffset","BaseComponent","bottom","right","borderRadius","btn","lineHeight","setVisibility","fn","goToTop","body","document","querySelector","scrollIntoView","behavior","img","MainScene","useSelector","state","clubs","useDispatch","loading","club_name","Base","map","item","idx","key","toString","alt","src","club_img_url","to","Footer","Boolean","location","hostname","match","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","Thunk","ReactDOM","render","exact","path","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","initialData","load","action","getType","type","payload"],"mappings":"+GAAA,+EAQaA,EAAgBC,4BAJC,uBACQ,+BACF,6BAEPA,GAWhBC,EAAmBD,4BAJE,2BACQ,mCACF,iCAERA,I,gCCnBhC,6CAUaE,EAAoBF,4BAJE,4BACQ,oCACF,kCAERA,I,8FCLlB,SAASG,EAGtBC,EAAuBC,GAErB,OAAO,WAAmC,IAAD,uBAAhBC,EAAgB,yBAAhBA,EAAgB,gBACrC,8CAAO,WAAOC,GAAP,qBAAAC,EAAA,6DACKC,EAA8BL,EAA9BK,QAASC,EAAqBN,EAArBM,QAASC,EAAYP,EAAZO,QAC1BJ,EAASE,OAAQG,IAFd,kBAIsBP,EAAc,WAAd,EAAkBC,GAJxC,OAIOO,EAJP,OAKCN,EAASG,EAAQG,IALlB,gDAOCN,EAASI,EAAQ,EAAD,KAPjB,yDAAP,mDAAM,O,gCCXd,yO,4DCGe,GACXG,aAHc,uCAAG,sBAAAN,EAAA,0FAAH,sD,iBCCZO,EAAOC,wBA2BE,GACXC,QAxBS,uCAAG,WAAOC,GAAP,eAAAV,EAAA,6DACZW,QAAQC,IAAI,kCADA,SAEWC,IAAMC,IAAIP,EAAO,cAF5B,cAENQ,EAFM,yBAGLA,EAASC,MAHJ,2CAAH,sDAyBTC,WAlBY,uCAAG,8BAAAjB,EAAA,6DACfW,QAAQC,IAAI,sCAENF,EAA0B,CAC5BQ,KAAM,EACNC,eAAgB,EAChBC,QAAS,GACTC,SAAU,uFAGdV,QAAQC,IAAIF,GAVG,SAYQG,IAAMC,IAAIP,EAAO,cAZzB,cAYTQ,EAZS,yBAaRA,EAASC,MAbD,2CAAH,sDCbhB,qE,gCCAA,iCAUMM,EAAWC,wBAA2C,CACxDC,KAAMC,IAAWC,YAClBC,aACCC,YAAiBlC,KACjBmC,YAAmBnC,IAAmB,SAG3BoC,8BAAgB,CAC3BR,c,mDClBJ,8DAIMS,EAAoBpC,YAAiBD,IAAmBsC,IAASvB,U,gCCJvE,iCAUMwB,EAAcV,wBAAqC,CACrDW,SAAUT,IAAWC,YACtBC,aACCC,YAAiBrC,KACjBsC,YAAmBtC,IAAe,aAGhC4C,EAAWZ,wBAAyC,CACtDC,KAAMC,IAAWC,YAClBC,aACCC,YAAiBnC,KACjBoC,YAAmBpC,IAAkB,SAG1BqC,8BAAgB,CAC3BM,KAAMH,EACNE,c,gGCxBE5B,EAAe,wB,4CAqBd,WAAwBS,GAAxB,eAAAhB,EAAA,sEACoBa,IAAMuB,KAAK7B,EAAO,cAAeS,EAAM,CAC1DqB,QAAS,CACL,eAAgB,sBAHrB,cACGtB,EADH,yBAMIA,EAASC,MANb,4C,kDClBsBrB,YAAiBJ,KDkBvC,SAAP,qCCjBgCI,YAAiBF,IAAiB6C,IAAShC,e,gCCN3E,yE,+NC6BeiC,MArBf,WAWE,OACE,sCCZWC,EAJO,WACpB,OAAO,kBAAC,EAAD,O,wBCsBHC,G,YAAkD,CACpDC,UAAW,CACPC,SAAU,QACVC,IAAK,EACLC,MAAO,MACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,gBAAgB,OAChBC,QAAU,UAIHC,EApCD,SAACC,GACX,IAAMC,EAAK,CACPC,cAAe,WACX,OAAGF,EAAMG,WACE,iBAGA,aAGfC,MAAO,WACH7C,QAAQC,IAAI,mBACZwC,EAAMI,UAGd,OACI,yBAAKC,MAAOhB,EAAOC,UAAWgB,UAAWL,EAAGC,iBACxC,4BAAQK,QAAUN,EAAGG,OAArB,WCsCNf,EAAkD,CACpDC,UAAW,CACPE,IAAK,IACLgB,KAAM,IACNjB,SAAU,QACVE,MAAO,OACPC,OAAQ,OAERC,QAAS,OACTC,cAAe,MACfa,eAAgB,iBAEpBC,KAAM,CACFZ,QAAS,EACTa,OAAQ,GAEZC,YAAa,CACTC,UAAW,cAEfC,YAAa,GAGbC,SAAU,GAGVC,KAAM,CACFC,SAAU,QACVnB,QAAS,WAWFoB,EAzFA,WAAO,IAAD,EAC2BC,oBAAS,GADpC,mBACVC,EADU,KACMC,EADN,OAE4BF,oBAAS,GAFrC,mBAEVG,EAFU,KAEOC,EAFP,KAGXtB,EAAK,CACPuB,KAAM,CACFC,KAAM,WACFJ,GAAkB,GAClB9D,QAAQC,IAAI,SAEhB4C,MAAO,WACHiB,GAAkB,KAG1BK,IAAM,CACFC,MAAQ,WACJ,OAAGL,EACQ,kBAGA,SAiBvB,OAXAM,qBAAU,WACNC,OAAOC,iBAAiB,UAAW,SAACC,GAC7BF,OAAOG,YAAc,GACpBT,GAAkB,GAGlBA,GAAkB,QAG3B,IAGC,oCACI,yBAAKlB,MAAOhB,EAAOC,UAAWgB,UAAWL,EAAGyB,IAAIC,SAC5C,4BAAQtB,MAAOhB,EAAO0B,SAAUR,QAASN,EAAGuB,KAAKC,MAC7C,kBAAC,IAAD,CAAWpB,MAAOhB,EAAO2B,QAE7B,4BAAQX,MAAOhB,EAAOyB,aAClB,kBAAC,IAAD,CAAoBT,MAAOhB,EAAO2B,SAG1C,kBAAC,EAAD,CAAeb,WAAYiB,EAAgBhB,MAAOH,EAAGuB,KAAKpB,UC5ChEC,EAAQ,CACVf,UAAW,CACPG,MAAO,SAIAM,EAdD,WACV,OAAQ,yBAAKM,MAAOA,EAAMf,WACtB,2CCMO2C,G,MALO,WAElB,OAAQ,uCC8CN5C,G,MAAkD,CACpDC,UAAW,CACPC,SAAU,QACVM,gBAAiB,OACjBJ,MAAO,OACPC,OAAQ,OACRwC,OAAQ,GACRC,MAAO,GACPC,aAAc,EACdzC,QAAS,OACTC,cAAe,SACfa,eAAgB,UAEpB4B,IAAM,CACFpB,SAAU,OACVqB,WAAW,UAIJvC,EAnED,WAAO,IAAD,EACoBoB,oBAAS,GAD7B,mBACThB,EADS,KACGoC,EADH,KAEhBX,qBAAU,WACNC,OAAOC,iBAAiB,UAAW,SAACC,GAC7BF,OAAOG,YAAc,GACpBO,GAAc,GAGdA,GAAc,QAGvB,IAEH,IAAMC,EAAK,CACPC,QAAU,WAEN,IAAMC,EAAOb,OAAOc,SAASC,cAAc,QAC/B,OAATF,GACCA,EAAKG,eAAe,CAACC,SAAU,aAKrC7C,EACM,WAEJ,MAAO,IAHTA,EAKK,WACH,OAAIE,EACO,aAGA,0BAKnB,OACI,yBAAKE,MAAK,eAAMhB,EAAOC,UAAb,GAA2BW,KAAaK,UAAWL,KACzD,4BAAQI,MAAOhB,EAAOgD,IAAK9B,QAASiC,EAAGC,SACnC,kBAAC,IAAD,MADJ,S,wBCwBNpD,EAAkD,CACpD0D,IAAK,CACDtD,MAAO,SAKAuD,EApDa,WACxB,IAAM5E,EAAI,eACH6E,aAAY,SAACC,GAAD,OAAsBA,EAAMC,MAAMjF,SAASE,SAGxDzB,EAAWyG,cAgBrB,OAdIxB,qBAAU,WACNjF,EAASgC,iCACV,CAAChC,IAEJiF,qBAAU,WAENrE,QAAQC,IAAIY,EAAKiF,WAClB,CAACjF,EAAKiF,UAETzB,qBAAU,WACW,OAAdxD,EAAKR,MACJL,QAAQC,IAAIY,EAAKR,KAAK,GAAG0F,aAE/B,CAAClF,EAAKR,OAER,yBAAK0C,UAAU,qBACX,kBAACiD,EAAD,MACA,kBAAC,EAAD,MACA,oCACA,6BAEQnF,EAAKR,MAAQQ,EAAKR,KAAK4F,KAAI,SAACC,EAAMC,GAC9B,OACI,yBAAKC,IAAKD,EAAIE,YACV,yBAAKC,IAAKJ,EAAKH,UAAWjD,MAAOhB,EAAO0D,IAAKe,IAAKL,EAAKM,eACvD,2BAAIN,EAAKH,gBAM7B,kBAAC,IAAD,CAAMU,GAAG,WAAT,UACA,kBAAC,EAAD,MACA,kBAACC,EAAD,Q,QCpDYC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2D,mCCTSC,EALK5F,0BAAgB,CAChCyE,gBACAnE,iBCSEuF,EAAQC,sBAAYF,EAAaG,8BAAoBC,0BAAgBC,OAE3EC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,UAAUC,UAAW5F,OAIrCuD,SAASsC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlI,QAAQkI,MAAMA,EAAMC,a,wKGvIfrH,EAAa,CACtBC,QAAS,SAAaqH,GAAb,MAAoD,CACzDtC,SAAS,EACTzF,KAAM+H,GAAe,KACrBF,MAAO,OAEXG,KAAM,SAAahI,GAAb,MAA6C,CAC/CyF,SAAS,EACTzF,KAAMA,GAAQ,KACd6H,MAAO,OAEX3I,QAAS,SAAac,GAAb,MAA4C,CACjDyF,SAAS,EACTzF,OACA6H,MAAO,OAEXA,MAAO,SAAOA,GAAP,MAAuC,CAC1CpC,SAAS,EACTzF,KAAM,KACN6H,MAAOA,KAMR,SAAShH,EAIdjC,EAAwBmH,GACtB,OAAO,SAACT,EAAU2C,GAAuB,IAAD,EACA,CAChCrJ,EAAmBK,QACnBL,EAAmBM,QACnBN,EAAmBO,SACrByG,IAAIsC,WAL8B,mBAC7BjJ,EAD6B,KACpBC,EADoB,KACXC,EADW,KAMpC,OAAQ8I,EAAOE,MACX,KAAKlJ,EACD,OAAO,eACAqG,EADP,eAEKS,EAAMtF,EAAWuH,SAE1B,KAAK9I,EACD,OAAO,eACAoG,EADP,eAEKS,EAAMtF,EAAWvB,QAAQ+I,EAAOG,WAEzC,KAAKjJ,EACD,OAAO,eACAmG,EADP,eAEKS,EAAMtF,EAAWoH,MAAMI,EAAOG,WAEvC,QACI,OAAO9C,IAKhB,SAAS1E,EACZhC,GAGA,MAAO,CAD+BA,EAA9BK,QAA8BL,EAArBM,QAAqBN,EAAZO,Y","file":"static/js/main.7ee5ce8b.chunk.js","sourcesContent":["import { createAsyncAction } from 'typesafe-actions';\nimport { IPost } from './interfaces';\nimport { AxiosError } from 'axios';\n\nexport const POST_POST_DATA = 'posts/POST_CLUB_DATA';\nexport const POST_POST_DATA_SUCCESS = 'posts/POST_CLUB_DATA_SUCCESS';\nexport const POST_POST_DATA_ERROR = 'posts/POST_CLUB_DATA_ERROR';\n\nexport const postPostAsync = createAsyncAction(\n    POST_POST_DATA,\n    POST_POST_DATA_SUCCESS,\n    POST_POST_DATA_ERROR,\n)<Promise<void>, IPost, AxiosError>();\n\n// 포스트 리스트 모두 가져오기\nexport const GET_POST_LIST_DATA = 'posts/GET_POST_LIST_DATA';\nexport const GET_POST_LIST_DATA_SUCCESS = 'posts/GET_POST_LIST_DATA_SUCCESS';\nexport const GET_POST_LIST_DATA_ERROR = 'posts/GET_POST_LIST_DATA_ERROR';\n\nexport const getPostListAsync = createAsyncAction(\n    GET_POST_LIST_DATA,\n    GET_POST_LIST_DATA_SUCCESS,\n    GET_POST_LIST_DATA_ERROR,\n)<Promise<void>, IPost[], AxiosError>();\n\n\n","import { createAsyncAction } from 'typesafe-actions';\n\nimport { IClub } from './interfaces';\nimport { AxiosError } from 'axios';\n\n// 동아리 리스트 가져오기 \nexport const GET_CLUBS_LIST_DATA = 'clubs/GET_CLUBS_LIST_DATA';\nexport const GET_CLUBS_LIST_DATA_SUCCESS = 'clubs/GET_CLUBS_LIST_DATA_SUCCESS';\nexport const GET_CLUBS_LIST_DATA_ERROR = 'clubs/GET_CLUBS_LIST_DATA_ERROR';\n\nexport const getClubsListAsync = createAsyncAction(\n    GET_CLUBS_LIST_DATA,\n    GET_CLUBS_LIST_DATA_SUCCESS,\n    GET_CLUBS_LIST_DATA_ERROR,\n)<Promise<void>, IClub[], AxiosError>();\n","import { Dispatch } from 'redux';\nimport { AsyncActionCreatorBuilder } from 'typesafe-actions';\n\ntype AnyAsyncActionCreator = AsyncActionCreatorBuilder<any, any, any>;\n\nexport default function createAsyncThunk<\n    A extends AnyAsyncActionCreator,\n    F extends (...params: any[]) => Promise<any>\n>(asyncActionCreator: A, promiseCreator: F) {\n    type Params = Parameters<F>;\n    return function thunk(...params: Params) {\n        return async (dispatch: Dispatch) => {\n            const { request, success, failure } = asyncActionCreator;\n            dispatch(request(undefined)); // 파라미터를 비우면 타입 에러가 나기 때문에 undefined 전달\n            try {\n                const result = await promiseCreator(...params);\n                dispatch(success(result));\n            } catch (e) {\n                dispatch(failure(e));\n            }\n        };\n    };\n}\n","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\nexport * from './thunks';","import axios from 'axios';\nconst getPostsList = async ()=>{}\n\nexport default {\n    getPostsList,\n}","import axios from 'axios';\nimport { IClub, IClubListOption } from '../../store/clubs/interfaces';\nconst host = process.env.REACT_APP_DB_HOST;\n\n// NOTICE : 비동기로 실행되나 돌려주는 항목이 Response가 아니라 IClub가 들어있는 배열을 돌려보냄\n// 목록을 조회 함, 검색을 해야되는 경우 options를 받아서 처리하도록 함\nconst getList = async (options?: IClubListOption): Promise<IClub[]> => {\n    console.log('[API/CLUBS] get list requested');\n    const response = await axios.get(host + '/api/clubs');\n    return response.data;\n};\n\n// TODO : 조회 수 높은순 동아리 목록\nconst getFavList = async (): Promise<IClub[]> => {\n    console.log('[API/CLUBS] get Fav list requested');\n\n    const options:IClubListOption = {\n        page: 1,\n        items_per_page: 5,\n        keyword: '',\n        category: '조회 수 높은 순 동아리 카테고리',\n    };\n    \n    console.log(options);\n    \n    const response = await axios.get(host + '/api/clubs');\n    return response.data;\n};\n\nexport default {\n    getList,\n    getFavList,\n};\n","import PostsAPI from './api/posts';\nimport ClubsAPI from './api/clubs';\n\n// API를 모두 불러서 등록해둠.\nexport {\n    PostsAPI,\n    ClubsAPI\n}","import { createReducer } from 'typesafe-actions';\nimport { ClubsListState, ClubsAction } from './types';\nimport { getClubsListAsync } from './actions';\nimport {\n    asyncState,\n    createAsyncReducer,\n    transformToArray,\n} from '../lib/reducerUtils';\nimport { combineReducers } from 'redux';\n\nconst ClubList = createReducer<ClubsListState, ClubsAction>({\n    list: asyncState.initial(),\n}).handleAction(\n    transformToArray(getClubsListAsync),\n    createAsyncReducer(getClubsListAsync, \"list\"),\n);\n\nexport default combineReducers({\n    ClubList\n});\n","import { ClubsAPI } from '../../db/';\nimport { getClubsListAsync } from './actions';\nimport createAsyncThunk from '../lib/createAsyncThunk';\n\nconst getClubsListThunk = createAsyncThunk(getClubsListAsync, ClubsAPI.getList);\n\nexport {\n    getClubsListThunk\n};","import { createReducer } from 'typesafe-actions';\nimport { PostState, PostAction, PostListState } from './types';\nimport { postPostAsync, getPostListAsync } from './actions';\nimport {\n    asyncState,\n    createAsyncReducer,\n    transformToArray,\n} from '../lib/reducerUtils';\nimport { combineReducers } from 'redux';\n\nconst PostReducer = createReducer<PostState, PostAction>({\n    postData: asyncState.initial(),\n}).handleAction(\n    transformToArray(postPostAsync),\n    createAsyncReducer(postPostAsync, 'postData'),\n);\n\nconst PostList = createReducer<PostListState, PostAction>({\n    list: asyncState.initial(),\n}).handleAction(\n    transformToArray(getPostListAsync),\n    createAsyncReducer(getPostListAsync, 'list'),\n);\n\nexport default combineReducers({\n    post: PostReducer,\n    PostList,\n});\n","import axios from 'axios';\n\nconst host: string = 'http://127.0.0.1:8000';\n\nexport async function getClubs() {\n    const response = await axios.get(host + '/api/clubs/');\n    return response.data;\n}\n\nexport interface Clubs {\n    club_id: number;\n    club_name: string;\n    club_introduce: string;\n    club_desc: string;\n    club_img_url: string;\n    created_at: Date;\n    updated_at: Date;\n    is_central: number;\n    is_united: number;\n    user: number;\n    club_type: number;\n}\n\nexport async function postPost(data: PostData) {\n    const response = await axios.post(host + '/api/posts/', data, {\n        headers: {\n            'content-type': 'application/json',\n        },\n    });\n    return response.data\n}\n\nexport interface Post {\n    post_id: number;\n    post_title_img_url: null;\n    created_at: null;\n    updated_at: null;\n    user: string;\n    post_title: string;\n    post_content: string;\n    is_deleted: number;\n    is_notice: number;\n    category: number;\n    club: number;\n}\n\nexport interface PostData {\n    post_title: string;\n    post_content: string;\n    is_deleted: number;\n    is_notice: number;\n    category: number;\n    club: number;\n    user: number;\n}\n","import { postPost } from '../../api';\nimport { PostsAPI } from '../../db';\nimport { postPostAsync, getPostListAsync } from './actions';\nimport createAsyncThunk from '../lib/createAsyncThunk';\n\nexport const postPostThunk = createAsyncThunk(postPostAsync, postPost);\nexport const getPostListThunk = createAsyncThunk(getPostListAsync,PostsAPI.getPostsList);","export { default } from './reducer';\nexport * from './actions';\nexport * from './types';\nexport * from './thunks';","import React, {useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport ClubIdForm from '../components/ClubIdForm';\nimport ClubInfo from '../components/ClubInfo';\nimport { postPostThunk } from '../store/posts';\nimport { PostData } from '../api';\n\nfunction ClubLoader() {\n\n  // const { data, loading, error } = useSelector((state: RootState) => state.post.postData);\n  // const dispatch = useDispatch();\n\n\n\n  // const onSubmitPostData = (postData :PostData) => {\n  //   dispatch(postPostThunk(postData));\n  // }\n\n  return (\n    <>\n      {/* <ClubIdForm onSubmitUsername={onSubmitPostData} />\n      {loading && <p style={{ textAlign: 'center' }}>로딩중..</p>}\n      {error && <p style={{ textAlign: 'center' }}>에러 발생!</p>}\n      {data && <ClubInfo introduce={data.post_title} name={data.post_content} created_at={data.post_id} />} */}\n    </>\n  );\n}\n\nexport default ClubLoader;","import React from 'react';\n\nimport ClubLoader from './containers/ClubLoader';\n\nconst App: React.FC = () => {\n  return <ClubLoader />;\n};\n\nexport default App;","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useEffect, useState } from 'react';\nimport './index.css';\n\nconst index = (props: any) => {\n    const ui = {\n        getVisibility: ()=>{\n            if(props.visibility){\n                return \"container open\"\n            } \n            else{\n                return \"container\"\n            }\n        },\n        close: ()=>{\n            console.log('menu will close');\n            props.close();\n        }\n    }\n    return (\n        <div style={styles.container} className={ui.getVisibility()} >\n            <button onClick={ ui.close }>close</button>\n            \n        </div>\n    );\n};\n\nconst styles: { [name: string]: React.CSSProperties } = {\n    container: {\n        position: 'fixed',\n        top: 0,\n        width: '94%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor:'#eee',\n        padding : '0 3%',\n    }\n}\n\nexport default index;","import React, { useState, useEffect } from 'react';\nimport { IoIosMenu, IoIosNotifications } from \"react-icons/io\";\nimport './header.css';\n\nimport SideMenuScene from '../../scenes/SideMenuScene';\n// https://gist.github.com/andjosh/6764939\n// 스크롤 애니메이션\n\nconst Header = () => {\n    const [menuVisibility, setMenuVisibility] = useState(false);\n    const [navTransparent , setNavTransparent] = useState(true);\n    const ui = {\n        menu: {\n            open: () => {\n                setMenuVisibility(true);\n                console.log('open');\n            },\n            close: () => {\n                setMenuVisibility(false);\n            }\n        },\n        nav : {\n            class : ()=>{\n                if(navTransparent){\n                    return \"nav transparent\"\n                }\n                else{\n                    return \"nav\";\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('scroll',  (ev:Event)=>{\n            if(window.pageYOffset > 30){\n                setNavTransparent(false);\n            }\n            else{\n                setNavTransparent(true);\n            }\n        });\n    }, []);\n\n    return (\n        <>\n            <nav style={styles.container} className={ui.nav.class()}>\n                <button style={styles.collapse} onClick={ui.menu.open}>\n                    <IoIosMenu style={styles.icon} />\n                </button>\n                <button style={styles.collapseBtn}>\n                    <IoIosNotifications style={styles.icon} />\n                </button>\n            </nav>\n            <SideMenuScene visibility={menuVisibility} close={ui.menu.close} />\n        </>);\n}\n\n// CSS 스타일링 \nconst styles: { [name: string]: React.CSSProperties } = {\n    container: {\n        top: '0',\n        left: '0',\n        position: 'fixed',\n        width: \"100%\",\n        height: \"56px\",\n        // backgroundColor: \"rgba(0,0,0,0)\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: 'space-between',\n    },\n    logo: {\n        padding: 0,\n        margin: 0,\n    },\n    logoWrapper: {\n        alignSelf: 'flex-start'\n    },\n    collapseBtn: {\n\n    },\n    collapse: {\n\n    },\n    icon: {\n        fontSize: '1.8em',\n        padding: \"0 .5em\",\n    },\n}\n\nconst linkStyles: { [name: string]: React.CSSProperties } = {\n    container: {},\n    wrapper: {},\n    item: {},\n    link: {},\n}\n\nexport default Header;\n","import React from 'react';\n\nconst index = () => {\n    return (<div style={style.container}>\n        <p>\n            FOOTER :-)\n        </p>\n    </div>);\n}\n\nconst style = {\n    container: {\n        width: \"100%\",\n    }\n}\n\nexport default index;","import React from 'react';\nimport './base.css';\nimport Color from './color';\n\n// 주요 스타일 혹은 필수 항목들을 이곳에 모아두도록 함 \nconst BaseComponent = ()=>{\n    // 기본 로드 되는 컴포넌트 \n    return (<></>);\n}\n\nexport default BaseComponent;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useEffect, useState } from 'react';\nimport { IoIosArrowUp } from 'react-icons/io';\nimport './index.css';\n\nconst index = () => {\n    const [visibility, setVisibility] = useState(false);\n    useEffect(() => {\n        window.addEventListener('scroll' , (ev:Event)=>{\n            if(window.pageYOffset > 30){\n                setVisibility(true)\n            }\n            else{\n                setVisibility(false);\n            }\n        });\n    }, []);\n\n    const fn = {\n        goToTop : ()=>{\n            // window.scrollTo(0,0);\n            const body = window.document.querySelector('body');\n            if(body !== null){\n                body.scrollIntoView({behavior: 'smooth'});\n            }\n        }\n    }\n\n    const ui = {\n        style : ()=>{\n            // return visibility ? {display:\"flex\"} : { display:'none' };\n            return {};\n        },\n        class: () => {\n            if (visibility) {\n                return \"nav-to-top\";\n            }\n            else {\n                return \"nav-to-top transparent\";\n            }\n        }\n    }\n\n    return (\n        <div style={{...styles.container, ...ui.style()}} className={ui.class()}>\n            <button style={styles.btn} onClick={fn.goToTop}>\n                <IoIosArrowUp></IoIosArrowUp>\n                Top\n            </button>\n        </div>\n    );\n};\n\nconst styles: { [name: string]: React.CSSProperties } = {\n    container: {\n        position: 'fixed',\n        backgroundColor: '#fff',\n        width: '50px',\n        height: '50px',\n        bottom: 20,\n        right: 15,\n        borderRadius: 5,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n    },\n    btn : {\n        fontSize: '.9em',\n        lineHeight:'.9em',\n    }\n}\n\nexport default index;","import React, { useEffect } from 'react';\n\n// UI 추가 구성 요소\nimport Header from '../../components/Header';\nimport Footer from '../../components/Footer';\nimport BaseComponent from '../../components/Base';\nimport NavToTop from '../../components/NavToTop';\n\n// 데이터를 가져오는데 필요한 요소\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport { getClubsListThunk } from '../../store/clubs';\n\n// React Router\nimport { Link } from 'react-router-dom';\n\n// TODO \n// 1. 가장 최근 동아리 활동 포스트\n// 2. 다가오는 내 관심 동아리 일정 \n// 4. 최근 동아리 공지사항 5건 \n// 3. 조회수 높은순 동아리 목록 \n// 5. 다가오는 동아리 일정 5건 \n// 6. footer\n\nconst MainScene: React.FC = () => {\n    const list = {\n        ...useSelector((state: RootState) => state.clubs.ClubList.list)\n    }\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getClubsListThunk());\n    }, [dispatch]);\n\n    useEffect(()=>{\n        // 로딩 인디케이터 \n        console.log(list.loading);\n    }, [list.loading]);\n\n    useEffect(()=>{\n        if(list.data !== null){\n            console.log(list.data[0].club_name);\n        }\n    },[list.data]);\nreturn (\n    <div className=\"content-container\">\n        <BaseComponent />\n        <Header />\n        <p>Hello</p>\n        <div>\n            {\n                list.data && list.data.map((item, idx) => {\n                    return (\n                        <div key={idx.toString()}>\n                            <img alt={item.club_name} style={styles.img} src={item.club_img_url}></img>\n                            <p>{item.club_name}</p>\n                        </div>\n                    );\n                })\n            }\n        </div>\n        <Link to='/second'>second</Link>\n        <NavToTop />\n        <Footer />\n    </div>\n);\n}\n\nconst styles: { [name: string]: React.CSSProperties } = {\n    img: {\n        width: '50px',\n        // height: '50px',\n    }\n}\n\nexport default MainScene;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers} from 'redux';\nimport clubs from './clubs';\nimport post from './posts';\n\nconst rootReducer = combineReducers({\n    clubs,\n    post\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport MainScene from './scenes/MainScene';\nimport { BrowserRouter, BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport Thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './store';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(Thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n    <Router>\n      <Route exact path=\"/\" component={MainScene}/>\n      <Route path=\"/second\" component={App}/>\n      </Router>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import { AnyAction } from 'redux';\nimport { getType } from 'typesafe-actions';\nimport { AsyncActionCreatorBuilder } from 'typesafe-actions';\n\nexport type AsyncState<T, E = any> = {\n    data: T | null;\n    loading: boolean;\n    error: E | null;\n};\n\nexport const asyncState = {\n    initial: <T, E = any>(initialData?: T): AsyncState<T, E> => ({\n        loading: false,\n        data: initialData || null,\n        error: null,\n    }),\n    load: <T, E = any>(data?: T): AsyncState<T, E> => ({\n        loading: true,\n        data: data || null,\n        error: null,\n    }),\n    success: <T, E = any>(data: T): AsyncState<T, E> => ({\n        loading: false,\n        data,\n        error: null,\n    }),\n    error: <T, E>(error: E): AsyncState<T, E> => ({\n        loading: false,\n        data: null,\n        error: error,\n    }),\n};\n\ntype AnyAsyncActionCreator = AsyncActionCreatorBuilder<any, any, any>;\n\nexport function createAsyncReducer<\n    S,\n    AC extends AnyAsyncActionCreator,\n    K extends keyof S\n>(asyncActionCreator: AC, key: K) {\n    return (state: S, action: AnyAction) => {\n        const [request, success, failure] = [\n            asyncActionCreator.request,\n            asyncActionCreator.success,\n            asyncActionCreator.failure,\n        ].map(getType);\n        switch (action.type) {\n            case request:\n                return {\n                    ...state,\n                    [key]: asyncState.load(),\n                };\n            case success:\n                return {\n                    ...state,\n                    [key]: asyncState.success(action.payload),\n                };\n            case failure:\n                return {\n                    ...state,\n                    [key]: asyncState.error(action.payload),\n                };\n            default:\n                return state;\n        }\n    };\n}\n\nexport function transformToArray<AC extends AnyAsyncActionCreator>(\n    asyncActionCreator: AC,\n) {\n    const { request, success, failure } = asyncActionCreator;\n    return [request, success, failure];\n}\n"],"sourceRoot":""}